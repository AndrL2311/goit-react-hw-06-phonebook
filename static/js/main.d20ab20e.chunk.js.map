{"version":3,"sources":["components/Form/Form.module.css","components/Contact/Contact.module.css","App.module.css","components/Filter/Filter.module.css","components/Contacts/Contacts.module.css","components/Form/Form.jsx","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/Contacts/Contacts.jsx","App.jsx","index.js"],"names":["module","exports","Form","onSubmit","useState","name","setName","number","setNumber","nameInputId","uuidv4","numberInputId","reset","className","s","formBox","event","preventDefault","label","htmlFor","input","type","id","value","onChange","currentTarget","pattern","title","required","button","Filter","Contact","onDeleteContact","item","onClick","Contacts","contacts","list","map","contact","App","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStoage","setContacts","filter","setFilter","visibleContacts","useMemo","normalizedFilter","toLowerCase","includes","container","titlePhonebook","data","find","alert","prevContacts","titleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d20ab20e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formBox\":\"Form_formBox__t4FbK\",\"button\":\"Form_button__243jh\",\"label\":\"Form_label__15SAE\",\"input\":\"Form_input__2ESfd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Contact_item__1d_kg\",\"button\":\"Contact_button__1wUL0\",\"name\":\"Contact_name__2ZcKm\",\"number\":\"Contact_number__2MvnN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"titlePhonebook\":\"App_titlePhonebook__2kfSQ\",\"titleContacts\":\"App_titleContacts__41vwQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contacts_list__tcvns\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport s from './Form.module.css';\n\nfunction Form({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = uuidv4();\n  const numberInputId = uuidv4();\n\n  const handleChangeName = event => {\n    const { value } = event.currentTarget;\n    setName(value);\n  };\n\n  const handleChangeNumber = event => {\n    const { value } = event.currentTarget;\n    setNumber(value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const data = { name, number };\n    onSubmit(data);\n    // Сбрасываем имя и номер\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.formBox} onSubmit={handleSubmit}>\n      <label className={s.label} htmlFor={nameInputId}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          id={nameInputId}\n          value={name}\n          onChange={handleChangeName}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.label} htmlFor={numberInputId}>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          id={numberInputId}\n          onChange={handleChangeNumber}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button className={s.button} type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  );\n}\n\n// class Form extends React.Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = uuidv4();\n//   numberInputId = uuidv4();\n\n//   handleChange = event => {\n//     const { name, value } = event.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = event => {\n//     event.preventDefault();\n\n//     // Проп который передается форме для вызова при сабмите\n//     this.props.onSubmit(this.state);\n//     // Сбрасываем имя и номер\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n//     return (\n//       <form className={s.formBox} onSubmit={this.handleSubmit}>\n//         <label className={s.label} htmlFor={this.nameInputId}>\n//           Name\n//           <input\n//             className={s.input}\n//             type=\"text\"\n//             name=\"name\"\n//             id={this.nameInputId}\n//             value={name}\n//             onChange={this.handleChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//           />\n//         </label>\n//         <label className={s.label} htmlFor={this.numberInputId}>\n//           Number\n//           <input\n//             className={s.input}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             id={this.numberInputId}\n//             onChange={this.handleChange}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//           />\n//         </label>\n//         <button className={s.button} type=\"submit\">\n//           Add Contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\nexport default Form;\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nfunction Filter({ value, onChange }) {\n  return (\n    <label className={s.label}>\n      Find contacts by name{' '}\n      <input\n        type=\"text\"\n        className={s.input}\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './Contact.module.css';\n\nfunction Contact({ id, name, number, onDeleteContact }) {\n  return (\n    <li className={s.item}>\n      <span className={s.name}>{name}</span>\n      <span className={s.number}>{number}</span>\n      <button\n        className={s.button}\n        type=\"button\"\n        onClick={() => onDeleteContact(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n}\n\nexport default Contact;\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './Contacts.module.css';\nimport Contact from '../Contact/Contact';\n\nfunction Contacts({ contacts, onDeleteContact }) {\n  return (\n    <ul className={s.list}>\n      {contacts.map(contact => (\n        <Contact\n          key={contact.id}\n          id={contact.id}\n          name={contact.name}\n          number={contact.number}\n          onDeleteContact={onDeleteContact}\n        />\n      ))}\n    </ul>\n  );\n}\n\nexport default Contacts;\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import { useState, useEffect, useMemo } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport s from './App.module.css';\nimport Form from './components/Form/Form';\nimport Filter from './components/Filter/Filter';\nimport Contacts from './components/Contacts/Contacts';\n\nfunction App() {\n  const defaultContacts = [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ];\n\n  const useLocalStoage = (key, defaultValue) => {\n    const [state, setState] = useState(() => {\n      return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n    });\n    useEffect(() => {\n      window.localStorage.setItem(key, JSON.stringify(state));\n    }, [key, state]);\n    return [state, setState];\n  };\n\n  const [contacts, setContacts] = useLocalStoage('contacts', defaultContacts);\n  const [filter, setFilter] = useState('');\n\n  const formSubmitHandler = data => {\n    // console.log(data);\n    if (contacts.find(contact => contact.name === data.name)) {\n      return alert(`${data.name} is alredy in contacts`);\n    } else {\n      data.id = uuidv4();\n      setContacts(prevContacts => [...prevContacts, data]);\n    }\n  };\n\n  const deleteContact = contactId => {\n    setContacts(prevContacts =>\n      prevContacts.filter(contact => contact.id !== contactId),\n    );\n  };\n\n  const changeFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  const visibleContacts = useMemo(() => {\n    const normalizedFilter = filter.toLowerCase();\n    // console.log(contacts);\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  }, [contacts, filter]);\n\n  // const getVisibleContacts = () => {\n  //   const normalizedFilter = filter.toLowerCase();\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  // };\n\n  // const visibleContacts = getVisibleContacts();\n\n  return (\n    <div className={s.container}>\n      <h1 className={s.titlePhonebook}>Phonebook</h1>\n      <Form onSubmit={formSubmitHandler} />\n      <h2 className={s.titleContacts}>Contacts</h2>\n      <Filter value={filter} onChange={changeFilter} />\n      <Contacts contacts={visibleContacts} onDeleteContact={deleteContact} />\n    </div>\n  );\n}\n\n// class App extends React.Component {\n//   state = {\n//     contacts: [\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   };\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   formSubmitHandler = data => {\n//     console.log(data);\n//     if (this.state.contacts.find(contact => contact.name === data.name)) {\n//       return alert(`${data.name} is alredy in contacts`);\n//     } else {\n//       data.id = uuidv4();\n//       this.setState(prevState => {\n//         // console.log(prevState.contacts); // будет разный на каждой итерации\n//         // Добавляем в масив новый объект\n//         return { contacts: [...prevState.contacts, data] };\n//       });\n//     }\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   changeFilter = event => {\n//     this.setState({ filter: event.currentTarget.value });\n//   };\n\n//   getVisibleContacts = () => {\n//     const { filter, contacts } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   render() {\n//     const visibleContacts = this.getVisibleContacts();\n\n//     return (\n//       <div className={s.container}>\n//         <h1 className={s.titlePhonebook}>Phonebook</h1>\n//         <Form onSubmit={this.formSubmitHandler} />\n//         <h2 className={s.titleContacts}>Contacts</h2>\n//         <Filter value={this.state.filter} onChange={this.changeFilter} />\n//         <Contacts\n//           contacts={visibleContacts}\n//           onDeleteContact={this.deleteContact}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n// ============================================\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}